"""3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке."""


class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __add__(self, other):
        return Cell(self.cells + other.cells)

    def __sub__(self, other):
        if (self.cells - other.cells) > 0:
            return Cell(self.cells - other.cells)
        else:
            return "Error! Число клеток не может быть отрицательным!"

    def __mul__(self, other):
        return Cell(self.cells * other.cells)

    def __truediv__(self, other):
        self.x = round(self.cells / other.cells)
        return Cell(self.x)

    def __str__(self):
        return f"{self.cells}"

    def make_order(self, num):
        self.num = num
        self.x = int(self.cells / self.num)
        self.pr = self.x * f"{'*' * self.num}\n"
        return f"{self.pr}{(self.cells - self.x * self.num) * '*'}"


c = Cell(100)
d = Cell(13)
print(c + d)
print(c - d)
print(c * d)
print(c / d)

print(c.make_order(7))
